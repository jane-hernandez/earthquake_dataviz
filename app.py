{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83d6f2cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "from plotly.subplots import make_subplots\n",
    "import dash\n",
    "from jupyter_dash import JupyterDash\n",
    "from dash import dcc, html  \n",
    "from dash.dependencies import Input, Output\n",
    "\n",
    "df= pd.read_csv('Earthquake_with_continents.csv')\n",
    "\n",
    "print(df.isnull().sum())\n",
    "df['date']=pd.to_datetime(df['date'])\n",
    "df['month'] = df['date'].dt.month\n",
    "df.head()\n",
    "df = df[[\"magnitude\",\"title\",\"date\",\"mmi\",\"tsunami\",\"sig\",\"type\",\"nst\",\"rms\",\"depth\",\n",
    "        \"latitude\",\"longitude\",\"continent\",\"month\"]]\n",
    "\n",
    "external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
    "app_bar = JupyterDash(__name__, external_stylesheets = external_stylesheets)\n",
    "\n",
    "colorscale = {'earthquake': '#FF595E','explosion':'#FFCA3A','quarry blast':'#8AC926','ice quake':'#1982C4'}\n",
    "\n",
    "app_bar.layout = html.Div([\n",
    "    html.Div([\n",
    "    html.P( \"Select a month:\", className = \"control_label\"),\n",
    "    dcc.Dropdown(\n",
    "        id=\"select_month\",\n",
    "        options=[\n",
    "            {'label': 'January', 'value': 1},\n",
    "            {'label': 'February', 'value': 2},\n",
    "            {'label': 'March', 'value': 3},\n",
    "            {'label': 'April', 'value': 4},\n",
    "            {'label': 'May', 'value': 5},\n",
    "            {'label': 'June', 'value': 6},\n",
    "            {'label': 'July', 'value': 7},\n",
    "            {'label': 'August', 'value': 8},\n",
    "            {'label': 'September', 'value': 9},\n",
    "            {'label': 'October', 'value': 10},\n",
    "            {'label': 'November', 'value': 11},\n",
    "            {'label': 'December', 'value': 12},\n",
    "        ],\n",
    "        value=1,\n",
    "        className=\"dcc_control\"\n",
    "    )\n",
    "    ]),\n",
    "    html.Div([\n",
    "    dcc.Graph(id='bar_graph')]),\n",
    "    \n",
    "    html.Div([\n",
    "        html.Div([\n",
    "    dcc.Dropdown(options=['earthquake', 'quarry blast', 'explosion','ice quake'], \n",
    "                 value=['earthquake','ice quake'], id='type_select', multi=True),\n",
    "    html.Div(id='dd-output-container')\n",
    "]),\n",
    "\t\t\t\thtml.Div(\n",
    "                    [ dcc.Graph(id = 'box_plot1')],\n",
    "\t\t\t\t),\n",
    "\t\t\t\thtml.Div(\n",
    "\t\t\t\t\t[ dcc.Graph(id = 'box_plot2')],\n",
    "\t\t\t\t),\n",
    "            html.Div(\n",
    "\t\t\t\t\t[ dcc.Graph(id = 'box_plot3')],\n",
    "\t\t\t\t),\n",
    "\t\t\t],\n",
    "\t\t\tclassName=\"row flex-display\",\n",
    "\t\t),\n",
    "\t],\n",
    "\tid=\"mainContainer\",\n",
    "\tstyle={\"display\": \"flex\", \"flex-direction\": \"column\"})\n",
    "\n",
    "@app_bar.callback(Output(\"bar_graph\",\"figure\"),Input(\"select_month\",\"value\"))\n",
    "\n",
    "def bar_graph(month_value):\n",
    "    temp = df[df['month'] == int(month_value)]\n",
    "    order = pd.DataFrame(temp['type'].value_counts(sort=True,ascending=False))\n",
    "    order.reset_index(inplace=True)\n",
    "    fig = px.bar(order, y=\"index\", x=\"type\",category_orders=dict(type=order['index']),color=\"index\",color_discrete_map=colorscale)\n",
    "    fig.update_layout(xaxis_title=\"Count\", yaxis_title=\"Seismic Event Type\", legend_title=\"Seismic Event Type\")\n",
    "    fig.update_layout(title_text=\"Number of events per type\")\n",
    "    return fig\n",
    "\n",
    "@app_bar.callback(Output(\"box_plot1\",\"figure\"),[Input(\"select_month\",\"value\"),Input(\"type_select\",\"value\")])\n",
    "\n",
    "def box_magnitude(month_value,type_values):\n",
    "    temp = df[(df['month'] == int(month_value))&(df['type'].isin(type_values))]\n",
    "    fig = px.box(temp,x=\"type\", y=\"magnitude\", points=\"all\",hover_data=[\"title\"],color=\"type\",color_discrete_map=colorscale)\n",
    "    fig.update_layout(yaxis_title=\"Magnitude\", xaxis_title=\"Seismic Event Type\", legend_title=\"Seismic Event Type\")\n",
    "    return fig\n",
    "\n",
    "@app_bar.callback(Output(\"box_plot2\",\"figure\"),[Input(\"select_month\",\"value\"),Input(\"type_select\",\"value\")])\n",
    "\n",
    "def box_sig(month_value,type_values):\n",
    "    temp = df[(df['month'] == int(month_value))&(df['type'].isin(type_values))]\n",
    "    fig = px.box(temp, x=\"type\", y=\"sig\", points=\"all\",hover_data=[\"title\"],color=\"type\",color_discrete_map=colorscale)\n",
    "    fig.update_layout(yaxis_title=\"Significance of the event\", xaxis_title=\"Seismic Event Type\", legend_title=\"Seismic Event Type\")\n",
    "    return fig\n",
    "\n",
    "@app_bar.callback(Output(\"box_plot3\",\"figure\"),[Input(\"select_month\",\"value\"),Input(\"type_select\",\"value\")])\n",
    "\n",
    "def box_depth(month_value,type_values):\n",
    "    temp = df[(df['month'] == int(month_value))&(df['type'].isin(type_values))]\n",
    "    fig = px.box(temp,x=\"type\", y=\"depth\", points=\"all\",hover_data=[\"title\"],color=\"type\",color_discrete_map=colorscale)\n",
    "    fig.update_layout(yaxis_title=\"Hypocentrer Depth (KM)\", xaxis_title=\"Seismic Event Type\", legend_title=\"Seismic Event Type\")\n",
    "    return fig\n",
    "\n",
    "\n",
    "# external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
    "# app_map = JupyterDash(__name__, external_stylesheets = external_stylesheets)\n",
    "\n",
    "# list_continents = list(df['continent'].unique())\n",
    "\n",
    "# app_map.layout = html.Div([\n",
    "#     html.Div([\n",
    "#     html.P( \"Select a continent:\", className = \"control_label\"),\n",
    "#     dcc.RadioItems(\n",
    "#         id=\"select_continent\",\n",
    "#         options=list_continents,\n",
    "#         value=\"Europe\",\n",
    "#         className=\"dcc_control\",inline=True\n",
    "#     )\n",
    "#     ]),\n",
    "#     html.Div([\n",
    "#     dcc.Graph(id='map_graph')]),\n",
    "    \n",
    "#     html.Div([\n",
    "# \t\t\t\thtml.Div(\n",
    "#                     [ dcc.Graph(id = 'scatter_graph')]\n",
    "# \t\t\t\t),\n",
    "# \t\t\t\thtml.Div(\n",
    "# \t\t\t\t\t[ dcc.Graph(id = 'pie_graph')]\n",
    "# \t\t\t\t),\n",
    "# \t\t\t],\n",
    "# \t\t\tclassName=\"row flex-display\",\n",
    "# \t\t),\n",
    "# \t],\n",
    "# \tid=\"mainContainer\",\n",
    "# \tstyle={\"display\": \"flex\", \"flex-direction\": \"column\"})\n",
    "\n",
    "# @app_map.callback(Output(\"map_graph\",\"figure\"),Input(\"select_continent\",\"value\"))\n",
    "# def map_events (continent): \n",
    "#     temp = df[df['continent']==continent]\n",
    "#     px.set_mapbox_access_token(open(\".mapbox_token\").read())\n",
    "#     fig = px.scatter_mapbox(temp, lat=\"latitude\", lon=\"longitude\", color=\"magnitude\", size =\"magnitude\",\n",
    "#                       color_continuous_scale=px.colors.sequential.Redor, size_max = 5,zoom=2,hover_name=\"title\",hover_data=['date'])\n",
    "#     fig.update_traces(hovertemplate = \"<b>%{hovertext}</b><br><br>Date: %{customdata[0]}<extra></extra>\")\n",
    "#     return fig\n",
    "\n",
    "# @app_map.callback(Output(\"scatter_graph\",\"figure\"),Input(\"select_continent\",\"value\"))\n",
    "\n",
    "# def scatter_graph(continent):\n",
    "#     temp = df[(df['continent']==continent)&(df['type']==\"earthquake\")]\n",
    "#     fig = px.scatter(temp, x='sig', y='rms', color='depth',color_continuous_scale=px.colors.sequential.Emrld,hover_name=\"title\",hover_data=['date'])\n",
    "#     fig.update_layout(plot_bgcolor='#E7ECEF',yaxis_title=\"Root Mean Square (Seismic Waves)\", xaxis_title=\"Significance of the event\")\n",
    "#     fig.update_traces(hovertemplate = \"<b>%{hovertext}</b><br><br>Date: %{customdata[0]}<extra></extra>\")\n",
    "#     fig.update_coloraxes(colorbar_title=\"Depth\")\n",
    "#     return fig\n",
    "\n",
    "# app_map.run_server(mode='inline',port=8050)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app_bar.run_server(debug=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
